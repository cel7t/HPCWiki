"use strict";(self.webpackChunkhpc_wiki=self.webpackChunkhpc_wiki||[]).push([[9511],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(a),f=r,d=m["".concat(p,".").concat(f)]||m[f]||u[f]||i;return a?n.createElement(d,o(o({ref:t},c),{},{components:a})):n.createElement(d,o({ref:t},c))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}f.displayName="MDXCreateElement"},7285:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:1,sidebar_label:"MPI",hide_table_of_contents:!0,hide_title:!0,pagination_next:null,pagination_prev:null,title:"MPI",draft:!1},o=void 0,l={unversionedId:"faq/software/mpi",id:"faq/software/mpi",title:"MPI",description:"MPI (Message Passing Interface)",source:"@site/docs/faq/software/mpi.mdx",sourceDirName:"faq/software",slug:"/faq/software/mpi",permalink:"/docs/faq/software/mpi",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"MPI",hide_table_of_contents:!0,hide_title:!0,pagination_next:null,pagination_prev:null,title:"MPI",draft:!1},sidebar:"FAQ"},p={},s=[{value:"MPI (Message Passing Interface)",id:"mpi-message-passing-interface",level:2},{value:"What is MPI?",id:"what-is-mpi",level:3},{value:"What MPI implementations are available on Sharanga?",id:"what-mpi-implementations-are-available-on-sharanga",level:3}],c={toc:s},m="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"mpi-message-passing-interface"},"MPI (Message Passing Interface)"),(0,r.kt)("h3",{id:"what-is-mpi"},"What is MPI?"),(0,r.kt)("p",null,"MPI also known as message passing interface is a set of standards that define a way to exchange data between processes. Most CPU parallel programming languages use MPI for communication."),(0,r.kt)("h3",{id:"what-mpi-implementations-are-available-on-sharanga"},"What MPI implementations are available on Sharanga?"),(0,r.kt)("p",null,"Currently, we support the following MPI implementations:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.open-mpi.org/"},"OpenMPI")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.mpich.org/"},"MPICH")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://mvapich.cse.ohio-state.edu/"},"MVAPICH2"))),(0,r.kt)("p",null,"Type the following command in the terminal to view the list of available MPI modules:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ spack find mpi\n")),(0,r.kt)("p",null,"We request the users to use these modules as they are optimised to run on Sharanga. To compile a MPI based CPU parallel job on Sharanga, use any of the following MPI commands. We have also provided an equivalent GNU Compiler command for the same."),(0,r.kt)("div",{className:"content-center"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"MPI Compiler Collection"),(0,r.kt)("th",{parentName:"tr",align:"center"},"GNU Compiler Collection"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"mpicc"),(0,r.kt)("td",{parentName:"tr",align:"center"},"gcc")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"mpic++, mpicxx"),(0,r.kt)("td",{parentName:"tr",align:"center"},"g++")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"mpifort"),(0,r.kt)("td",{parentName:"tr",align:"center"},"gfortran"))))),(0,r.kt)("p",null,"For example to compile a C++ MPI application ",(0,r.kt)("inlineCode",{parentName:"p"},"sample.cxx")," using MPI C++ compiler ",(0,r.kt)("inlineCode",{parentName:"p"},"mpic++"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ mpic++ sample.cxx\n")))}u.isMDXComponent=!0}}]);