"use strict";(self.webpackChunkhpc_wiki=self.webpackChunkhpc_wiki||[]).push([[9511],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),f=r,d=u["".concat(p,".").concat(f)]||u[f]||m[f]||i;return n?a.createElement(d,o(o({ref:t},c),{},{components:n})):a.createElement(d,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7285:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return m}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={sidebar_position:1,sidebar_label:"MPI",hide_table_of_contents:!0,hide_title:!0,pagination_next:null,pagination_prev:null,title:"MPI",draft:!1},p=void 0,s={unversionedId:"faq/software/mpi",id:"faq/software/mpi",title:"MPI",description:"MPI (Message Passing Interface)",source:"@site/docs/faq/software/mpi.mdx",sourceDirName:"faq/software",slug:"/faq/software/mpi",permalink:"/docs/faq/software/mpi",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"MPI",hide_table_of_contents:!0,hide_title:!0,pagination_next:null,pagination_prev:null,title:"MPI",draft:!1},sidebar:"FAQ"},c={},m=[{value:"MPI (Message Passing Interface)",id:"mpi-message-passing-interface",level:2},{value:"What is MPI?",id:"what-is-mpi",level:3},{value:"What MPI implementations are available on Sharanga?",id:"what-mpi-implementations-are-available-on-sharanga",level:3}],u={toc:m};function f(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"mpi-message-passing-interface"},"MPI (Message Passing Interface)"),(0,i.kt)("h3",{id:"what-is-mpi"},"What is MPI?"),(0,i.kt)("p",null,"MPI also known as message passing interface is a set of standards that define a way to exchange data between processes. Most CPU parallel programming languages use MPI for communication."),(0,i.kt)("h3",{id:"what-mpi-implementations-are-available-on-sharanga"},"What MPI implementations are available on Sharanga?"),(0,i.kt)("p",null,"Currently, we support the following MPI implementations:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.open-mpi.org/"},"OpenMPI")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.mpich.org/"},"MPICH")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://mvapich.cse.ohio-state.edu/"},"MVAPICH2"))),(0,i.kt)("p",null,"Type the following command in the terminal to view the list of available MPI modules:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ spack find mpi\n")),(0,i.kt)("p",null,"We request the users to use these modules as they are optimised to run on Sharanga. To compile a MPI based CPU parallel job on Sharanga, use any of the following MPI commands. We have also provided an equivalent GNU Compiler command for the same."),(0,i.kt)("div",{class:"content-center"},(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"MPI Compiler Collection"),(0,i.kt)("th",{parentName:"tr",align:"center"},"GNU Compiler Collection"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"mpicc"),(0,i.kt)("td",{parentName:"tr",align:"center"},"gcc")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"mpic++, mpicxx"),(0,i.kt)("td",{parentName:"tr",align:"center"},"g++")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"mpifort"),(0,i.kt)("td",{parentName:"tr",align:"center"},"gfortran"))))),(0,i.kt)("p",null,"For example to compile a C++ MPI application ",(0,i.kt)("inlineCode",{parentName:"p"},"sample.cxx")," using MPI C++ compiler ",(0,i.kt)("inlineCode",{parentName:"p"},"mpic++"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ mpic++ sample.cxx\n")))}f.isMDXComponent=!0}}]);